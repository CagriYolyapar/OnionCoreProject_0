Identity => Sizin icin hazır yetkilendirme ve rol sisteminin Veritabanına Microsoft tarafından dahil edilmesidir...

Entities
*********
*Microsoft.AspNetCore.Identity => Identity işlemleri icin indirdigimiz bir kütüphanedir...Burada dikkat edin Core olmayan bir Identity Package'ini referans almamalısınız...(Identity işlemleri icin kastettigimiz kullanıcı ekleme, login olma , signin olma , şifremi unuttum, mail gönderme)

*Microsoft.Extensions.Identity.Stores => NetCore MVC'den ve EF'ten bagımsız bir katmanda Core Identity yapısı kullanılacaksa Identity kütüphanesinin yanında Stores kütüphanesinin de indirilmesi gereklidir...

----------------------------------

MAP(ENTITIES katmanından referans alır)
***
*Microsoft.EntityFrameworkCore => EF işlemlerinin temeli bu kütüphaneden baslar(IEntityTypeConfiguration Interface'i de bu kütüphanededir)
*Microsoft.EntityFrameworkCore.SqlServer => Core'da IEntityTypeConfiguration Interdace'i icerisinde SQLServer icin HasColumnName ve benzeri metotların gelebilmesi icin ihtiyacımız olan kütüphanedir

------------------------------------------
DAL(MAP'ten referans alır dolayısıyla zincirleme olarak Core Platformunda MAP'in icerisindeki ENTITIES de gelecegi icin ENTITES'ten referans almak zorunda kalmayacagız(ENTITIES'e tabii ki ihtiyacımız vardır))
****
*Microsoft.EntityFrameworkCore => İhtiyacı vardır ama zaten MAP'ten gelmektedir

*Microsoft.EntityFrameworkCore.SqlServer => İhtiyacı vardır ama MAP'ten gelmektedir

*Microsoft.EntityFrameworkCore.Tools => Migrations islemlerini terminalden yapmak icin Tools 
kütüphanesine ihtiyacı vardır...

*Mcrosoft.EntityFrameworkCore.Proxies => LazyLoading ayarlamaları yapabilmek icin..

*Microsoft.AspNetCore.Identity.EntityFrameworkCore => Artık Identity kullandıgımız icin burada MyContext class'ımız DbContext sınıfından degil IdentityDbContext class'ından miras almalıdır... O da bu kütüphane icerisindedir..

---------------------------------
COMMON
***
SessionExtension sınıfı icin...Dikkat edin artık burada farklı bir katmanda ve .Net Standart class Library'sindesiniz...O yüzden normal şartlardaki gibi SessionExtension icin kütüphaneler otomatik gelmez...

*Microsoft.AspNetCore.HTTP.Features => ISession tipini kullanmanızı saglar...

*Microsoft.AspNetCore.HTTP.Extensions => Common katmanında ISession tipinin SetString ve GetString extension metotlarına ulasabilmenizi saglar...

*Newtonsoft.JSON => JSON Serialize ve Deserialize işlemleri icin indirdigimiz kütüphanemizdir...
--------------------------

BLL(DAL'den referans alır)
***

*Microsoft.EntityFrameworkCore => İhtiyacı vardır ama zaten DAL'den gelmektedir...Service Injection Options ayarları yapılacaktır...

*Microsoft.EntityFrameworkCore.SqlServer => İhityacı vardır ama DAL'den gelmektedir...Service Injection yapılırken Options'un UseSqlServer metodunu kullanması gerkeir o yüzden ihtiyacı vardır

*Microsoft.AspNetCore.Identity => İhtiyacı vardır ama zincirleme referans olarak gelir...Identity servislerini inject etmek icin (Dependency Injection'a bildirmek icin ihtiyacı vardır)

*System.Configurations.ConfigurationManager => Mevcut calısan projenin congiguration'inina baska katmanlardan ulasabilmek  icin indirmeniz gereken kütüphanedir.

------------------
UI(BLL'den ve COMMON'dan referans alacaktır)
***

*Microsoft.EntityFrameworkCore(Chain reference olarak gelir)

*Microsoft.EntityFrameworkCore.SqlServer(chain referans olarka gelir)

*Microsoft.EntityFrameworkCore.Design => Migration icin Tools kütüphanesini DAL'de ekleyerek ayrı bir katmanda terminal işlemleri yaptıgımızdan dolayı o Tools'a destek verebilmesi icin UI'a bu Design kütüphanesinin indirilmesi gereklidir...


